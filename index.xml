<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://rtandr01d.net/</link>
    <description>Recent content on </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Aug 2025 00:05:35 -0500</lastBuildDate>
    <atom:link href="https://rtandr01d.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Utilizing nativeMessaging In Chrome Extensions For Desktop Client Interraction</title>
      <link>https://rtandr01d.net/post/chrome_extension/</link>
      <pubDate>Sun, 17 Aug 2025 00:05:35 -0500</pubDate>
      <guid>https://rtandr01d.net/post/chrome_extension/</guid>
      <description>Introduction Chrome browser extensions provide access to several powerful web APIs, giving developers almost limitless functionality that can be built in to their extensions. Web content can be modified, cookies can be changed, and even desktop clients can be controlled. However, if the extension is not set up with the proper permissions, issues can arise allowing malicious websites to take advantage of the extension&amp;rsquo;s capabilities to wreak havoc. Lets take a look at how improper permissions and the nativeMessaging function can be used to gain access to functions of an extension&amp;rsquo;s paired desktop client.</description>
    </item>
    <item>
      <title>Cross Compile With AFL</title>
      <link>https://rtandr01d.net/post/crosscompile-with-afl/</link>
      <pubDate>Sat, 16 Aug 2025 15:17:17 -0500</pubDate>
      <guid>https://rtandr01d.net/post/crosscompile-with-afl/</guid>
      <description>The PetitPotam vulnerability has been around for quite some time now, but there is frighteningly little information on how to set up this attack as a lab. There is a decent writeup on it over on DirkJanm&amp;rsquo;s page however his setup relies on using delegation to set up up a new machine to the domain. My idea of a good lab setup for PetitPotam is relaying the machine account of our vulnerable target to the ADCS server and creating a CSR for that machine account.</description>
    </item>
    <item>
      <title>Powershell Reverse Shell via IEX</title>
      <link>https://rtandr01d.net/post/posh_reverse/</link>
      <pubDate>Sat, 16 Aug 2025 15:17:17 -0500</pubDate>
      <guid>https://rtandr01d.net/post/posh_reverse/</guid>
      <description>When you ware working in a Windows environment, whether Active Directory is involved or not, there will come a time when you need a reverse shell, and most reverse shells from Pentest Monkey arent going to work in your situation. Gaining RCE on a Windows box typically means you have access to either cmd or Powershell. Getting a reliable shell can give some trouble, but luckily, Powershell has the ability to call and run Powershell scripts remotely without dropping anything on disk.</description>
    </item>
    <item>
      <title>Setting Up A Petit Potam Lab</title>
      <link>https://rtandr01d.net/post/petitpotam_lab/</link>
      <pubDate>Sat, 16 Aug 2025 15:17:17 -0500</pubDate>
      <guid>https://rtandr01d.net/post/petitpotam_lab/</guid>
      <description>The PetitPotam vulnerability has been around for quite some time now, but there is frighteningly little information on how to set up this attack as a lab. There is a decent writeup on it over on DirkJanm&amp;rsquo;s page however his setup relies on using delegation to set up up a new machine to the domain. My idea of a good lab setup for PetitPotam is relaying the machine account of our vulnerable target to the ADCS server and creating a CSR for that machine account.</description>
    </item>
  </channel>
</rss>
